SHELL_STUDY -*-mode: org-*-

* Shell Expansion
  
** 1. Command and Arguments

   Knowing *shell expansion* is importand because many *commands* on your Linux
   system are processed and most likely changed by the *shell* before they are
   executed.

   The command line interface or *shell* used on most Linux systems is calledn
   *bash*  , which stands for *Bourne again shell* .

   This chapter frequently uses the *echo* command to demonstrate shell
   features. The *echo* command is very simple; it echoes the input that it
   receives. 

   #+BEGIN_SRC sh
   $ echo Burtonville
   Burtonville

   $ echo Smurfs are blue
   Smurfs are blue
   #+END_SRC
   
*** 1.1 Arguments

    One of the primary features of a shell is to perform a *command line scan*.
    When you enter a command at the shell's command prompt and press the enter
    key, then the shell will start scanning that line, cutting it up in
    *arguments*. While scanning the line, the shell may make many changes to the
    *arguments* you typed.

    This process is called *shell expansion* . when the shell has finished
    scanning and modifying that line, then it will be executed.

    
*** 1.2 White Space Removal

    Parts that are separated by one or more consecutive *white space* (or tabs)
    are considered separate *arguments* , any white space is removed. The first
    *argument* is the command to be executed, the other *arguments* are given to
    the command.

    This explains why the following four different command lines are the same
    after *shell expansion* .

    #+BEGIN_SRC sh
    $ echo Hello world
    Hello world

    $ echo  Hello    world
    Hello world

    $ echo     Hello       world
    Hello world

    $       echo       Hello        world
    Hello world
    #+END_SRC

    
*** 1.3 Single quotes

    You can prevent the removal of white spaces by quoting the spaces. The
    contents of the quoted string are considered as one argument.

    #+BEGIN_SRC sh
    $ echo 'A line with              single          quotes'
    A line with           single           quotes

    #+END_SRC

    
*** 1.4 Double quotes

    You can also prevent the removal of white spaces by double quoting the
    spaces. Same as above,*echo* only receives one *argument* .

    #+BEGIN_SRC sh
    $ echo "A line with          double        quotes"
    A line with             double            quotes
    #+END_SRC

    Later, when discussing *variables* we will see important differences between
    single and double quotes.

    
*** 1.5 Echo and quotes

    Quoted lines can include special escaped characters recognised by the *echo*
    command (when using *echo -e* ). The screenshot below shows how to use *\n*
    for a newline and *\t* for a tab (usually eight white spaces).

    #+BEGIN_SRC sh
    $ echo -e "A line with \na newline"
    A line with
    a newline

    $ echo -e 'A line with \na newline'
    A line with
    a newline

    $ echo -e "A line with \ta tab"
    A line with         a tab

    $ echo -e 'A line with \ta tab'
    A line with        a tab

    #+END_SRC

    The echo command can generate more than white spaces, tabs and newlines.
    Look in the man page for a list of options.

    
*** 1.6 Commands

    
**** 1.6.1 External or builtin commands?

     Not all commands are external to the shell, some are *builtin* . *External
     commands* are programs that have their own binary and reside somewhere in
     the file system. Many external commands are located in */bin* or */sbin* .
     *Builtin commands* are an integral part of the shell program itself.

     
**** 1.6.2 Type

     To find out whether a command given to the shell will be executed as
     *external command* as a *builtin command*, use the *type* command.

     #+BEGIN_SRC sh
     $ type cd
     cd is a shell builtin

     $type cat
     cat is /bin/cat

     #+END_SRC
     As you can see, the *cd* command is *builtin* and the *cat* command is
     *external* .

     You can also use this command to show you whether the command is *aliased*
     or not.

     #+BEGIN_SRC sh
     $ type ls
     ls is aliased to `ls --color=auto`

     #+END_SRC

     
**** 1.6.3 Running external commands

     Some commands have both builtin and external versions. When one of these
     commands is executed, the builtin version takes priority. To run the
     external version, you must enter the full path to the command.

     #+BEGIN_SRC sh
     $ type -a echo
     echo is a shell builtin
     echo is /bin/echo

     $ /bin/echo Running the external echo command ...
     Running the external echo command ...
     #+END_SRC
     
**** 1.6.4 which


     The *which* command will search for binaries in the *$PATH* environment
     variable (variables will be explained later). In the screenshot below, it
     is determined that *cd* is *builtin* , and *ls, cp, rm, mv, mkdir, pwd* and
     *which* are external commands.

     #+BEGIN_SRC sh
     $ which cp ls cd mkdir pwd
     /bin/cp
     /bin/ls
     /usr/bin/which: no cd in ( /usr/kerberos/sbni: /usr/kerberos/bin: ...
     /bin/mkdir
     /bin/pwd
     #+END_SRC

     
*** 1.7 Aliases

    
**** 1.7.1 Create an alias

     The shell allows you to create *aliases* . Aliases are often used to create
     an easier to remember name for an existing command or to easily supply
     parameters.

     #+BEGIN_SRC sh
       $ cat > count.txt << END
       one
       two
       three
       END

       $ cat count.txt
       one
       two
       three

       $ alias dog=tac
       $ dog count.txt 
       three
       two
       one

       #+END_SRC

       
**** 1.7.2 Abbreviate commands

     An *alias* can also be useful to abbreviate an exiting command.

     #+BEGIN_SRC sh
     $ alias ll='ls -lh --color=auto'
     $ alias c='clear'
     $
     #+END_SRC

     
**** 1.7.3 Default options

     Aliases can be used to supply commands with default options. The example
     below shows how to set the *-i* option default when typing *rm* .

     #+BEGIN_SRC sh
     $ rm -i winter.txt
     rm : remove regular file winter.txt? no

     $ rm winter.txt
     $ ls winter.txt
     ls: winter.txt: No such file or directory

     $ touch winter.txt
     $ alias rm='rm -i'
     $ rm winter.txt
     rm: remove regular empty file 'winter.txt'? no

     #+END_SRCg files

     Some distributions enable default aliases to protect users from
     accidentally erasing files('rm -i', 'mv -i', 'co -i')

**** 1.7.4 Viewing aliases

     You can provide one or more aliases as arguments to the *alias* command to
     get their definition. Providing no arguments gives a complete list of
     current aliases.

     #+BEGIN_SRC sh
     $ alias c ll
     alias c='clear'
     alias ll='ls -lh --color=auto'
     #+END_SRC

     
**** 1.7.5 Unalias

     You can undo an alias with the
     *unalias* command.
     
     #+BEGIN_SRC sh
     $ which rm
     /bin/rm

     $ alias rm='rm -i'
     $ which rm
     alias rm='rm -i'
           /bin/rm

    $ unalias rm
    $which rm
    /bin/rm
    #+END_SRC

    
*** 1.8 Displaying shell expansion

    You can display shell expansion with *set -x* , and stop displaying it with
    *set +x* . You might want to use this further on in this course, or when in
    doubt about exactly what the shell is doing with your command.

    #+BEGIN_SRC sh
    $ set -x
    ++ echo -ne '\033]0;soo@zoring:~\007'

    $ echo $USER
    +echo soo
    soo
    ++ echo -ne '\033]0;soo@zorin:~\007'

    $ echo \$USER
    + echo '$USER'
    $USER
    ++ echo -ne '\033]0;soo@zorin:~\007'

    $ set +x
    + set +x

    $ echo $USER
    soo

    #+END_SRC

  
*** 1.9 연습문제

    + How many *arguments* are in this line (not counting the command itself).
      #+BEGIN_SRC sh
      $ touch '/etc/cron/cron.allos' 'file 42.txt' "file 33.txt"
      #+END_SRC

      sol: three

    + Is *tac* a shell builtin command?

      sol:
      #+BEGIN_SRC sh
      $ type tac
      #+END_SRC

    + Is there an existing alias for *rm* ?
      sol:
      #+BEGIN_SRC sh
      $ alias rm
      #+END_SRC

    + Read the man page of *rm* , make sure you understand the *-i* option of
      rm. Create  and remove a file to test the *-i* option.
      sol:
      #+BEGIN_SRC sh
      $ man rm
      $ touch testfile
      $ rm -i testfile
      #+END_SRC

    + Execute: *alias rm='rm -i'* . Test your alias with a test file. Does this
      work as expected?
      sol:
      #+BEGIN_SRC sh
      $ touch tesfile
      $ rm testfile (should ask for confirmation)
      #+END_SRC

    + List all current aliases.
      sol:
      #+BEGIN_SRC sh
      $ alias
      #+END_SRC

    + Creat an alias called 'city' that echoes your hometown
      sol:
      #+BEGIN_SRC sh
      $ alias city='echo Seoul'
      #+END_SRC

    + Use your alias to test that it works.
      sol:
      #+BEGIN_SRC sh
      $ city
      #+END_SRC

    + Execute *set -x* to display shell expansion for every command.
      sol:
      #+BEGIN_SRC sh
      $ set -x
      #+END_SRC

    + Test the functionality of *set -x* by executing your *city* and *rm* aliases.
      sol:
      #+BEGIN_SRC sh
      shell should display the resolved aliases and then execute the command:
      $ set -x
      $ city
      echo antwerp
      antwerp
      #+END_SRC

    + 
     
